import unittest

from NLP_4test import NLP

import traceback
import emoji
import csv
import time
from datetime import datetime, timedelta
from pythainlp.corpus.common import thai_words
import pandas
from bs4 import BeautifulSoup
import random

class Test(unittest.TestCase):
    def setUp(self):
        self.nlp = NLP()
        self.start = time.time()

    # **********************************************NLP**********************************************
    def test_main_nlp(self):
        print("*****test_main_nlp*****")

        datas = "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ô‡∏ô‡∏∂‡∏á ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ß‡πà‡∏≤‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Microsoft Account ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏à. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö (‡∏≠‡∏à. ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå ‡∏ó‡∏≥‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏•‡∏¢ ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ) - ‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 30 ‡∏Ç‡πâ‡∏≠ 160 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß"
        made = self.nlp.main_nlp(datas)
        in_put = type(made)
        #mode = "equal"
        condition = type(list())

        print(f'{in_put}, {condition} OK')
        self.assertEqual(in_put, condition)
        print("*****test_main_nlp*****")

    def test_detection_lang(self):
        print("*****test_detection_lang*****")

        datas = "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ô‡∏ô‡∏∂‡∏á ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ß‡πà‡∏≤‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏áMicrosoft Account ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏à. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö (‡∏≠‡∏à. ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå ‡∏ó‡∏≥‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏•‡∏¢ ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ) - ‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 30 ‡∏Ç‡πâ‡∏≠ 160 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß"
        lang = "th"
        made = self.nlp.detection_lang(datas)
        in_put = made
        #mode = "equal"
        condition = lang

        print(f'{in_put}, {condition} OK')
        self.assertEqual(in_put, condition)
        print("*****test_detection_lang*****")

    def test_sentiment_eng(self):
        print("*****test_sentiment_eng*****")

        datas = "The power of modern search engines is undeniable: you can summon knowledge from the internet at a moment‚Äôs notice. Unfortunately this superpower isn‚Äôt omnipresent. There are many situations where search is relegated to strict keyword search or when the objects aren‚Äôt text search may not be available. Furthermore strict keyword search doesn‚Äôt allow the user to search semantically which means information is not as discoverable."
        mode = "neu"
        in_put = self.nlp.sentiment_eng(datas)
        #mode2 = "equal"
        condition = mode

        print(f'{in_put}, {condition} OK')
        self.assertEqual(in_put, condition)
        print("*****test_sentiment_eng*****")
    
    def test_sentiment_thai(self):
        print("*****test_sentiment_thai*****")

        datas = "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ô‡∏ô‡∏∂‡∏á ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ß‡πà‡∏≤‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏áMicrosoft Account ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏à. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö (‡∏≠‡∏à. ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå ‡∏ó‡∏≥‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏•‡∏¢ ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ) - ‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 30 ‡∏Ç‡πâ‡∏≠ 160 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß"
        mode = "neu"
        result = self.nlp.main_nlp(datas)
        temp = self.nlp.sentiment_thai(result)
        in_put = temp
        #mode = "equal"
        condition = mode

        print(f'{in_put}, {condition} OK')
        self.assertEqual(in_put, condition)
        print("*****test_sentiment_thai*****")

    def test_loadData_and_storeData(self):
        print("*****test_loadData_and_storeData*****")

        datas = [123]
        self.nlp.storeData(datas, "‡∏•‡∏ö‡∏≠‡∏≠‡∏Å")
        in_put = self.nlp.loadData("‡∏•‡∏ö‡∏≠‡∏≠‡∏Å")
        #mode = "equal"
        condition = datas

        print(f'{in_put}, {condition} OK')
        self.assertEqual(in_put, condition)
        print("*****test_loadData_and_storeData*****")

    def test_clear_name_places(self):
        print("*****test_clear_name_places*****")
        #pattern = [str(i) for i in range(10)]
        datas = "üá´üá∑ Bastille Day üéÇ Birthday üõçÔ∏è Black Friday ‚úäüèø Black Lives Matter üá®üá¶ Canada Day üáßüá∑ Carnaval üêâ Chinese New Year üéÖ Christmasüá≤üáΩ Cinco de Mayo ü¶† Coronavirus"
        result = self.nlp.clear_name_places(datas)
        in_put = emoji.get_emoji_regexp().search(result)
        #mode = "equal"
        condition = None

        print(f'{in_put}, {condition} OK')
        self.assertEqual(in_put, condition)
        print("*****test_clear_name_places*****")
    # **********************************************NLP**********************************************

if( __name__ == "__main__"):
    unittest.main()

